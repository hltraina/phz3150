The following is a random selection from Think Python :

The goal of this book is to teach you to think like a computer scientist. This way of thinking combines
some of the best features of mathematics,
engineering,
and natural science.
Like mathematicians, computer scientists use formal languages to denote ideas (specifically computations). Like engineers, they design things, assembling
components into systems and evaluating tradeoffs
among alternatives. Like
scientists, they observe the behavior of complex systems, form hypotheses, and test predictions.  The single most important skill for a computer scientist is problem solving.

Problem solving means the ability to formulate problems, think creatively about solutions, and express a solution clearly and accurately. As it turns out, the
process of learning to program is an excellent opportunity to practice problem-solving skills. That’s why this chapter is called, “The way of the
program”. On one level, you will be learning to program, a useful skill by itself. On another level, you will use programming as a means to an end. As we
go along,
that end
will become clearer.

1.1 What is a program? A program is a sequence of
instructions that specifies
how to perform a computation. The computation might be
something mathematical, such as solving a system of equations or finding the roots of a polynomial, but it can also be a symbolic computation, such as searching and replacing text in a document or something graphical, like processing an image or playing a video.

The details look different in different languages, but a few basic instructions

appear in just about every language:


input: Get data from the keyboard, a file, the network, or some other device.

output: Display data on the screen, save it in a file, send it over the network, etc.

math: Perform basic mathematical
operations like addition and multiplication.

conditional execution: Check for certain conditions and run the appropriate code.
repetition: Perform some action repeatedly, usually with some variation.

Believe it or not, that’s pretty much all there is to it. Every program you’ve ever used, no matter how complicated, is made up of instructions that look pretty much like these. So you can think of programming as the process of breaking a large, complex task into smaller and smaller subtasks until the subtasks are simple enough to be performed with one of these basic instructions.
